import tkinter as tk
from tkinter import filedialog, messagebox
from xml.etree import ElementTree as ET
from tkinter import ttk
import folium
import webbrowser

selected_file_path = None
coordinates_list = []

# Function to handle the button click and open the file dialog
def select_route():
    global selected_file_path
    selected_file_path = filedialog.askopenfilename(filetypes=[("KML files", "*.kml")])
    if selected_file_path:
        print(f"Selected file: {selected_file_path}")
        display_coordinates()

# Function to display the coordinates in the cua1 frame
def display_coordinates():
    global coordinates_list
    coordinates_list = []

    if not selected_file_path:
        messagebox.showwarning("No File Selected", "Please select a route first.")
        return

    tree = ET.parse(selected_file_path)
    root = tree.getroot()
    namespace = {'kml': 'http://www.opengis.net/kml/2.2'}
    
    for i in treeview.get_children():
        treeview.delete(i)
    
    for placemark in root.findall('.//kml:Placemark', namespace):
        for point in placemark.findall('.//kml:Point', namespace):
            coordinates = point.find('kml:coordinates', namespace).text.strip()
            long, lat, alt = coordinates.split(',')
            treeview.insert("", "end", values=(long, lat, alt))
            coordinates_list.append((float(lat), float(long), float(alt)))

# Function to show the coordinates on a map
def show_map():
    if not coordinates_list:
        messagebox.showwarning("No Coordinates Available", "Please select a route and display coordinates first.")
        return

    # Create a map centered around the first coordinate
    map_center = coordinates_list[0][:2]
    my_map = folium.Map(location=map_center, zoom_start=12)

    # Add circle markers for each coordinate
    for lat, long, alt in coordinates_list:
        folium.CircleMarker(
            location=[lat, long],
            radius=3,  # Adjust the radius as needed
            popup=f"Altitude: {alt}",
            color="black",
            fill=True,
            fill_color="black"
        ).add_to(my_map)

    # Add lines connecting each pair of consecutive points
    folium.PolyLine(
        locations=[(lat, long) for lat, long, alt in coordinates_list],
        color="white",
        weight=1
    ).add_to(my_map)

    # Save the map to an HTML file and open it in a web browser
    map_path = "route_map.html"
    my_map.save(map_path)
    webbrowser.open(map_path)

# Create the main application window
root = tk.Tk()
root.title("Four Squares GUI")

# Define the size of each square
square_size = 300

# Create and place the four squares
cua1 = tk.Frame(root, width=square_size, height=square_size, bg="black")
cua1.grid(row=0, column=0, padx=10, pady=10)

cua2 = tk.Frame(root, width=square_size, height=square_size, bg="black")
cua2.grid(row=2, column=0, padx=10, pady=10)

cua3 = tk.Frame(root, width=square_size, height=square_size, bg="black")
cua3.grid(row=0, column=1, padx=10, pady=10)

cua4 = tk.Frame(root, width=square_size, height=square_size, bg="black")
cua4.grid(row=2, column=1, padx=10, pady=10)

# Make sure the squares retain their size
cua1.grid_propagate(False)
cua2.grid_propagate(False)
cua3.grid_propagate(False)
cua4.grid_propagate(False)

# Add a Treeview widget to cua1 for displaying coordinates in columns
treeview = ttk.Treeview(cua1, columns=("LONG", "LAT", "ALT"), show='headings')
treeview.heading("LONG", text="LONG")
treeview.heading("LAT", text="LAT")
treeview.heading("ALT", text="ALT")

treeview.column("LONG", anchor=tk.CENTER)
treeview.column("LAT", anchor=tk.CENTER)
treeview.column("ALT", anchor=tk.CENTER)

treeview.pack(expand=True, fill=tk.BOTH)

# Create and place buttons under the corresponding squares
bot1 = tk.Button(root, text="Select Route", command=select_route)
bot1.grid(row=1, column=0, padx=10, pady=10)

bot2 = tk.Button(root, text="Show route coordinates", command=show_map)
bot2.grid(row=3, column=0, padx=10, pady=10)

bot3 = tk.Button(root, text="Select Satellital Image")
bot3.grid(row=1, column=1, padx=10, pady=10)

bot4 = tk.Button(root, text="Show Clouds")
bot4.grid(row=3, column=1, padx=10, pady=10)

# Run the application
root.mainloop()
