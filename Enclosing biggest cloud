import tkinter as tk
from tkinter import filedialog, messagebox
from xml.etree import ElementTree as ET
from tkinter import ttk
import folium
import webbrowser
from PIL import Image, ImageTk
import base64
import numpy as np
import cv2

selected_file_path = None
selected_image_path = None
coordinates_list = []

# Function to handle the button click and open the file dialog for KML
def select_route():
    global selected_file_path
    selected_file_path = filedialog.askopenfilename(filetypes=[("KML files", "*.kml")])
    if selected_file_path:
        print(f"Selected file: {selected_file_path}")
        display_coordinates()

# Function to display the coordinates in the cua1 frame
def display_coordinates():
    global coordinates_list
    coordinates_list = []

    if not selected_file_path:
        messagebox.showwarning("No File Selected", "Please select a route first.")
        return

    tree = ET.parse(selected_file_path)
    root = tree.getroot()
    namespace = {'kml': 'http://www.opengis.net/kml/2.2'}
    
    for i in treeview.get_children():
        treeview.delete(i)
    
    for placemark in root.findall('.//kml:Placemark', namespace):
        for point in placemark.findall('.//kml:Point', namespace):
            coordinates = point.find('kml:coordinates', namespace).text.strip()
            long, lat, alt = coordinates.split(',')
            treeview.insert("", "end", values=(long, lat, alt))
            coordinates_list.append((float(lat), float(long), float(alt)))

# Function to show the coordinates on a map
def show_map():
    if not coordinates_list:
        messagebox.showwarning("No Coordinates Available", "Please select a route and display coordinates first.")
        return

    # Create a map centered around the first coordinate
    map_center = coordinates_list[0][:2]
    my_map = folium.Map(location=map_center, zoom_start=5)

    # Add circle markers for each coordinate
    for lat, long, alt in coordinates_list:
        folium.CircleMarker(
            location=[lat, long],
            radius=5,  # Adjust the radius as needed
            popup=f"Altitude: {alt}",
            color="blue",
            fill=True,
            fill_color="blue"
        ).add_to(my_map)

    # Add lines connecting each pair of consecutive points
    folium.PolyLine(
        locations=[(lat, long) for lat, long, alt in coordinates_list],
        color="white",
        weight=2
    ).add_to(my_map)

    # Overlay the image onto the map
    if selected_image_path:
        encoded_image = base64.b64encode(open(selected_image_path, 'rb').read()).decode()
        image_overlay = folium.raster_layers.ImageOverlay(
            image=f'data:image/png;base64,{encoded_image}',
            bounds=[[14.145824, -84.557812], [14.145968, -64.419774], [-6.102251, -84.557876], [-6.102301, -64.419760]],
            opacity=0.6,
        )
        image_overlay.add_to(my_map)

        # Detect and draw the largest red cloud contour
        detect_and_draw_largest_red_cloud(my_map)

    # Save the map to an HTML file and open it in a web browser
    map_path = "route_map.html"
    my_map.save(map_path)
    webbrowser.open(map_path)

# Function to handle the button click and open the file dialog for PNG
def select_image():
    global selected_image_path
    selected_image_path = filedialog.askopenfilename(filetypes=[("PNG files", "*.png")])
    if selected_image_path:
        print(f"Selected image: {selected_image_path}")
        display_image(selected_image_path)
    else:
        clear_image()

# Function to display the selected image in the cua3 frame
def display_image(file_path):
    img = Image.open(file_path)
    img = img.resize((square_size, square_size), Image.LANCZOS)
    image = ImageTk.PhotoImage(img)
    image_label.config(image=image, bg="black")
    image_label.image = image

# Function to clear the image from cua3 frame
def clear_image():
    image_label.config(image='', bg="black")

# Function to detect the largest red cloud in the image and draw its contour on the map
def detect_and_draw_largest_red_cloud(my_map):
    # Load the image using OpenCV
    img = cv2.imread(selected_image_path)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    
    # Define the lower and upper bounds for the red color in the image
    lower_red = np.array([150, 0, 0])
    upper_red = np.array([255, 100, 100])

    # Create a mask for the red areas
    mask = cv2.inRange(img, lower_red, upper_red)

    # Find contours in the mask
    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    if not contours:
        return  # No red clouds found

    # Find the largest contour based on area
    largest_contour = max(contours, key=cv2.contourArea)
    
    # Calculate the bounding box for the detected red areas
    bounds = [[14.145824, -84.557812], [14.145968, -64.419774], [-6.102251, -84.557876], [-6.102301, -64.419760]]
    lat_min, lat_max = bounds[2][0], bounds[0][0]
    lon_min, lon_max = bounds[0][1], bounds[1][1]

    # Get the image dimensions
    height, width, _ = img.shape

    # Normalize the contour coordinates to the geographical bounds
    hull = cv2.convexHull(largest_contour)  # Get the convex hull of the largest contour
    polyline = []
    for point in hull:
        x, y = point[0]
        lat = lat_min + (lat_max - lat_min) * (height - y) / height
        lon = lon_min + (lon_max - lon_min) * x / width
        polyline.append((lat, lon))
    
    # Add the polyline to the map
    folium.PolyLine(polyline, color="red", weight=2).add_to(my_map)

# Create the main application window
root = tk.Tk()
root.title("Four Squares GUI")

# Define the size of each square
square_size = 300

# Create and place the four squares
cua1 = tk.Frame(root, width=square_size, height=square_size, bg="black")
cua1.grid(row=0, column=0, padx=10, pady=10)

cua2 = tk.Frame(root, width=square_size, height=square_size, bg="black")
cua2.grid(row=2, column=0, padx=10, pady=10)

cua3 = tk.Frame(root, width=square_size, height=square_size, bg="black")
cua3.grid(row=0, column=1, padx=10, pady=10)

cua4 = tk.Frame(root, width=square_size, height=square_size, bg="black")
cua4.grid(row=2, column=1, padx=10, pady=10)

# Make sure the squares retain their size
cua1.grid_propagate(False)
cua2.grid_propagate(False)
cua3.grid_propagate(False)
cua4.grid_propagate(False)

# Add a Treeview widget to cua1 for displaying coordinates in columns
treeview = ttk.Treeview(cua1, columns=("LONG", "LAT", "ALT"), show='headings')
treeview.heading("LONG", text="LONG")
treeview.heading("LAT", text="LAT")
treeview.heading("ALT", text="ALT")

treeview.column("LONG", anchor=tk.CENTER)
treeview.column("LAT", anchor=tk.CENTER)
treeview.column("ALT", anchor=tk.CENTER)

treeview.pack(expand=True, fill=tk.BOTH)

# Add an image label to cua3 for displaying the selected image
image_label = tk.Label(cua3, bg="black")
image_label.pack(expand=True, fill=tk.BOTH)

# Create and place buttons under the corresponding squares
bot1 = tk.Button(root, text="Select Route", command=select_route)
bot1.grid(row=1, column=0, padx=10, pady=10)

bot2 = tk.Button(root, text="Show route coordinates", command=show_map)
bot2.grid(row=3, column=0, padx=10, pady=10)

bot3 = tk.Button(root, text="Select Satellital Image", command=select_image)
bot3.grid(row=1, column=1, padx=10, pady=10)

bot4 = tk.Button(root, text="Show Clouds")
bot4.grid(row=3, column=1, padx=10, pady=10)

# Run the application
root.mainloop()
